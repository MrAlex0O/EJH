// <auto-generated />
using System;
using DataBase.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataBase.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230122083610_UserRoles")]
    partial class UserRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataBase.Models.Assistant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DisciplineId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Assistants");
                });

            modelBuilder.Entity("DataBase.Models.Discipline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LectorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Semester")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("LectorId");

                    b.ToTable("Disciplines");
                });

            modelBuilder.Entity("DataBase.Models.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DataBase.Models.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("DisciplineId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LessonTypeId")
                        .HasColumnType("uuid");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DisciplineId");

                    b.HasIndex("LessonTypeId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("DataBase.Models.LessonType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EnumId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LessonTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6aa74582-0eba-4eee-a960-3b6fc3092130"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8525),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8533),
                            EnumId = 1,
                            Name = "Лекция"
                        },
                        new
                        {
                            Id = new Guid("3e46ecb0-a6e6-49eb-9f9e-32daa6595bc9"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8564),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8564),
                            EnumId = 2,
                            Name = "Лабораторная работа"
                        },
                        new
                        {
                            Id = new Guid("f69a359a-4986-4253-9409-078660dc8fc8"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8576),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8576),
                            EnumId = 3,
                            Name = "Семинар"
                        },
                        new
                        {
                            Id = new Guid("bc9474a1-4fb2-4638-b1c4-f4ca21c68bb9"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8624),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8624),
                            EnumId = 4,
                            Name = "Занятие"
                        });
                });

            modelBuilder.Entity("DataBase.Models.LessonVisitor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("LessonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StatusOnLessonId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StatusOnLessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("LessonsVisitors");
                });

            modelBuilder.Entity("DataBase.Models.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Midname")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Persons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6aa74582-0eba-4eee-a960-3b6fc3092130"),
                            Address = "Admin@",
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8775),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8776),
                            Email = "Admin@",
                            Midname = "Admin",
                            Name = "Admin",
                            PhoneNumber = "Admin0",
                            Surname = "Admin"
                        });
                });

            modelBuilder.Entity("DataBase.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6aa74582-0eba-4eee-a960-3b6fc3092130"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8726),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8727),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("3e46ecb0-a6e6-49eb-9f9e-32daa6595bc9"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8740),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8740),
                            Name = "Teacher"
                        },
                        new
                        {
                            Id = new Guid("f69a359a-4986-4253-9409-078660dc8fc8"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8750),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8750),
                            Name = "Headman"
                        },
                        new
                        {
                            Id = new Guid("bc9474a1-4fb2-4638-b1c4-f4ca21c68bb9"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8759),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8760),
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("DataBase.Models.StatusOnLesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EnumId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StatusOnLessons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6aa74582-0eba-4eee-a960-3b6fc3092130"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8642),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8642),
                            EnumId = 1,
                            Name = "Присутствовал"
                        },
                        new
                        {
                            Id = new Guid("3e46ecb0-a6e6-49eb-9f9e-32daa6595bc9"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8657),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8657),
                            EnumId = 2,
                            Name = "Отсутствовал"
                        },
                        new
                        {
                            Id = new Guid("f69a359a-4986-4253-9409-078660dc8fc8"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8668),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8669),
                            EnumId = 3,
                            Name = "Освобожден"
                        },
                        new
                        {
                            Id = new Guid("bc9474a1-4fb2-4638-b1c4-f4ca21c68bb9"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8679),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8680),
                            EnumId = 4,
                            Name = "Другая подгруппа"
                        },
                        new
                        {
                            Id = new Guid("79765635-f6e4-49bf-a7ac-11c3458f2fa9"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8691),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8692),
                            EnumId = 5,
                            Name = "Отсутствовал (уважительная причина)"
                        },
                        new
                        {
                            Id = new Guid("075eb8de-9471-4542-958d-d8ab12320a71"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8708),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 559, DateTimeKind.Local).AddTicks(8709),
                            EnumId = 6,
                            Name = "Невозможно рассчитать"
                        });
                });

            modelBuilder.Entity("DataBase.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("PersonId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DataBase.Models.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("PersonId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("DataBase.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6aa74582-0eba-4eee-a960-3b6fc3092130"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 706, DateTimeKind.Local).AddTicks(8382),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 706, DateTimeKind.Local).AddTicks(8395),
                            PasswordHash = "$2a$11$LBqxRnD2gtUPmlQIpPi6CuhCUmrfZ9c9s.znNiVWIpsBx/5Fvuu4C",
                            PersonId = new Guid("6aa74582-0eba-4eee-a960-3b6fc3092130"),
                            Username = "Admin"
                        });
                });

            modelBuilder.Entity("DataBase.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6aa74582-0eba-4eee-a960-3b6fc3092130"),
                            DateCreate = new DateTime(2023, 1, 22, 11, 36, 9, 706, DateTimeKind.Local).AddTicks(8648),
                            DateUpdate = new DateTime(2023, 1, 22, 11, 36, 9, 706, DateTimeKind.Local).AddTicks(8649),
                            RoleId = new Guid("6aa74582-0eba-4eee-a960-3b6fc3092130"),
                            UserId = new Guid("6aa74582-0eba-4eee-a960-3b6fc3092130")
                        });
                });

            modelBuilder.Entity("DataBase.Models.Assistant", b =>
                {
                    b.HasOne("DataBase.Models.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId");

                    b.HasOne("DataBase.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");

                    b.Navigation("Discipline");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("DataBase.Models.Discipline", b =>
                {
                    b.HasOne("DataBase.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("DataBase.Models.Teacher", "Lector")
                        .WithMany()
                        .HasForeignKey("LectorId");

                    b.Navigation("Group");

                    b.Navigation("Lector");
                });

            modelBuilder.Entity("DataBase.Models.Lesson", b =>
                {
                    b.HasOne("DataBase.Models.Discipline", "Discipline")
                        .WithMany()
                        .HasForeignKey("DisciplineId");

                    b.HasOne("DataBase.Models.LessonType", "LessonType")
                        .WithMany()
                        .HasForeignKey("LessonTypeId");

                    b.Navigation("Discipline");

                    b.Navigation("LessonType");
                });

            modelBuilder.Entity("DataBase.Models.LessonVisitor", b =>
                {
                    b.HasOne("DataBase.Models.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId");

                    b.HasOne("DataBase.Models.StatusOnLesson", "StatusOnLesson")
                        .WithMany()
                        .HasForeignKey("StatusOnLessonId");

                    b.HasOne("DataBase.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");

                    b.Navigation("Lesson");

                    b.Navigation("StatusOnLesson");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("DataBase.Models.Student", b =>
                {
                    b.HasOne("DataBase.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("DataBase.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("Group");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataBase.Models.Teacher", b =>
                {
                    b.HasOne("DataBase.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataBase.Models.User", b =>
                {
                    b.HasOne("DataBase.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DataBase.Models.UserRole", b =>
                {
                    b.HasOne("DataBase.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataBase.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
